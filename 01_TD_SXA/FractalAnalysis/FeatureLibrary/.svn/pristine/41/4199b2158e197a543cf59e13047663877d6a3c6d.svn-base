function [Output, outputNames]=GLCM(image,mask,paramList)

global ROI Outline Analysis Image StructuralAnalysis Error PreciseOutline Info

dynamic=65536;
UnderSamplingFactor=1;
BreastFraction=1;

%% initialisation
StructuralAnalysis.FDTH=[];
StructuralAnalysis.RMS=0;
StructuralAnalysis.CDslope=0;
StructuralAnalysis.Caldwell=0;
StructuralAnalysis.Intercept=0;
StructuralAnalysis.StructuralAnalysisType = 1;
StructuralAnalysis.CancerRegionID = 0;
Error.PC=false;

%%
%try
tic
    %Work on uncorrected images
  
  CurrentImage_notexcuded=Image.OriginalImage(ROI.ymin:ROI.ymax,ROI.xmin:ROI.xmax);
  %figure;
  %imagesc(CurrentImage_notexcuded); colormap(gray);
   %CurrentImage= CurrentImage_notexcuded;

   CurrentImage=excludePCmuscle(CurrentImage_notexcuded);
    clear CurrentImage_notexcuded;
    %Erase ouside of the skin edge
    midpoint=ceil(length(Outline.x)/2);
    for index=1:midpoint
        CurrentImage(1:ceil(BreastFraction*(Outline.y(index)-Analysis.midpoint)+Analysis.midpoint),ceil(BreastFraction*Outline.x(index)))=0;
        CurrentImage(ceil(BreastFraction*(Outline.y(length(Outline.y)-index)-Analysis.midpoint)+Analysis.midpoint):end,ceil(BreastFraction*Outline.x(index)))=0;        
    end    
    CurrentImage(:,ceil(BreastFraction*midpoint):end)=0;
    %CurrentImage = CurrentImage.*BreastMask;
%     index1 = find(CurrentImage<0);
%     im1 = CurrentImage(index1);
    %CurrentImageInit = double(CurrentImage);
    
     if (Info.Analysistype==20) %JW 09-08-2010
        MaskBiopsyROI=createMaskBiopsyROI;
        MaskBiopsyROIcrop.circle=zeros(size(CurrentImage));
        tempSize=size(MaskBiopsyROI.circle);
        MaskBiopsyROIcrop.circle(1:tempSize(1),1:tempSize(2))=MaskBiopsyROI.circle;
        %Changes done to avoid dimension mismatch.
        CurrentImage=CurrentImage.*MaskBiopsyROIcrop.circle;
        CurrentImage=UnderSamplingN(CurrentImage, UnderSamplingFactor);
    else
        %Commented by Song: image rescale by the factor of UnderSamplingFactor
        CurrentImage=UnderSamplingN(CurrentImage,UnderSamplingFactor);
    end
    BreastMaskUndersample = ~(CurrentImage==0);
   % figure;imagesc(BreastMaskUndersample);colormap(gray);
%     index2 = find(CurrentImage<0);
%     im2 = CurrentImage(index2);
    %CurrentImageUnderSample = CurrentImage;
    % figure('Name', 'CurrentImage'); imagesc(CurrentImage); colormap(gray);  
    %compute primitive of histogram of the breast
    bins=[0:1000]*(dynamic-Analysis.BackGroundThreshold)/1000;
    FlatImage=reshape(CurrentImage,prod(size(CurrentImage)),1);
    Histc = histc(FlatImage,bins);
    Histc(1)=0;   %erase background from calculation
    Histp=cumsum(Histc);
    Histp=Histp/Histp(end);
    %figure;
    %plot(Histp);
    %fractal analysis 
    FractalCurrentImage=CurrentImage;
   % figure;
   % imagesc(CurrentImage); colormap(gray);
   % figure;imagesc(FractalCurrentImage); colormap(gray);
    x=1:4;
    for k=x       
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %Fractal dimension of thresholded image "FD_th"
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        for indexFractalThreshold=1:17
            FractalThreshold=0.05*indexFractalThreshold;
            [maxi,thresholdindex]=max(Histp>FractalThreshold);
            threshold=bins(thresholdindex);
            
            %compute fractal dimension (feature 1: FD_th_x%)
            image = (FractalCurrentImage>threshold);
           
            [gradiant,gradimage]=myGradiant(image);
            % figure;imagesc(~gradimage);colormap(gray);
            FD_Th(k,indexFractalThreshold)=log10(gradiant);
        end
        %%%%%%%%%%%%%%%%%%%%%%%%%%%
        %Fractal dimension of RMS %
        %%%%%%%%%%%%%%%%%%%%%%%%%%%
        %destroy the zeros 
        FlatImage=reshape(FractalCurrentImage,1,prod(size(FractalCurrentImage)));        
        Sorted=sort(FlatImage,2);
        [maxi,index]=max(Sorted>0);
        Sorted(1:index-1)=[];
        resultVar(k)=log10(var(Sorted))/2;

        %%%%%%%%%%%%%%%%%%%%%
        %%%%% CALDWELL %%%%%%
        %%%%%%%%%%%%%%%%%%%%%
        tempImage=abs(FractalCurrentImage(1:end-1,1:end-1)-FractalCurrentImage(2:end,1:end-1))+abs(FractalCurrentImage(1:end-1,1:end-1)-FractalCurrentImage(1:end-1,2:end));
        CalwellSurface(k)=log10(sum(sum(tempImage)));
        
        FractalCurrentImage=UnderSamplingN(FractalCurrentImage,2);
        %figure('Name', 'FractalCurrentImage');
        %imagesc(FractalCurrentImage); colormap(gray);  
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%% Continuous dimension %%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    CdYintX=[1:5]; 
    for k=CdYintX          
        S=4*k+1;
        %Prolongate Image to avoid border effect
        ImageYint2=[CurrentImage(:,1)*ones(1,2*k) CurrentImage CurrentImage(:,end)*ones(1,2*k)];
        ImageYint2=[ones(2*k,1)*ImageYint2(1,:); ImageYint2; ones(2*k,1)*ImageYint2(end,:)];        
        
        filter=ones(S)/S^2;
        ConvImage=conv2(ImageYint2,filter,'valid');        
        ImageYint3=CurrentImage-ConvImage;
 
        [gradiant,imageGrad]=MyGradiant(ImageYint3);
        GradYint(k)=log10(gradiant);
    end
    
    %fractal analysis FD_TH
    for indexFractalThreshold=1:17
        p = polyfit(x,FD_Th(:,indexFractalThreshold)',1);
        StructuralAnalysis.FDTH(indexFractalThreshold)=-p(1)/log10(2);
    end
    
    %fractal analysis RMS
    p = polyfit(x,resultVar,1);
    StructuralAnalysis.RMS=-p(1)/log10(2);

    %Caldwell
    p = polyfit(x,CalwellSurface,1);
    StructuralAnalysis.Caldwell=-p(1)/log10(2);
    
    %continuous dimension
    p = polyfit(log10(CdYintX),GradYint,1);
    StructuralAnalysis.CDslope=p(1);
    StructuralAnalysis.CDIntercept=p(2);

    %HZ_PROJ
    signal=sum(CurrentImage');
    %find the row where the number of pixel id less than 10 and destroy them
    pixels=sum(CurrentImage'>0);
    RowsToKeep=pixels>=10;    
    [Sorted,indexSort]=sort(RowsToKeep);
    [maxi,index]=max(Sorted);
    signal=signal./pixels;
    signal(indexSort(1:index-1))=[];
    StructuralAnalysis.HZPROJ=(var(signal))^0.5/1000;
        
    ReturnResults=[StructuralAnalysis.FDTH StructuralAnalysis.RMS StructuralAnalysis.CDIntercept StructuralAnalysis.CDslope StructuralAnalysis.HZPROJ StructuralAnalysis.Caldwell];
    StructuralAnalysis.Results=ReturnResults;
    str = StructuralAnalysis
   % SaveInDatabase('STRUCTURALANALYSIS');  %for temporary
    ;
      display('films');
    toc 
    %%%%%%%%%%%%%%%% FIRST ORDER GRAY-LEVEL HISTOGRAM %%%%%%%%%%%
    
    tic 
    %figure;imagesc(CurrentImage);colormap(gray);
    %CurrentImage = CurrentImageInit;
    %CurrentImage = CurrentImageUnderSample;
    %figure;imagesc(CurrentImage);colormap(gray);
     %CurrentImage = CurrentImage.*BreastMask;
     %figure('Name', 'CurrentImage'); imagesc(CurrentImage); colormap(gray);  
      min_CurrentImage = min(min(CurrentImage));
     if min_CurrentImage < 0 & abs(min_CurrentImage)< 10000
         CurrentImage = (CurrentImage - min_CurrentImage+1).*BreastMaskUndersample;
     else
         CurrentImage=CurrentImage;
     end
     FlatImage=reshape(CurrentImage,1,prod(size(CurrentImage)));  
     Sorted_vect=sort(FlatImage,2);
     [maxi,index]=max(Sorted_vect>0);
     Sorted_vect(1:index-1)=[];
     
     
     Num = length(Sorted_vect);
     std_image = std(Sorted_vect);
     mean_image = mean(Sorted_vect);
     min_image = round(min(Sorted_vect));
     max_image = round(max(Sorted_vect));
     var_image = var(Sorted_vect);
     skew_roi = sum(((Sorted_vect - mean_image)/std_image).^3)/(Num-1);
     kurt_roi = sum(((Sorted_vect - mean_image)/std_image).^4)/(Num-1); 
         
%      skew_roi2 = sum(sum((((CurrentImage - mean_image)/std_image).^3).*BreastMaskUndersample))/(Num-1);
%      kurt_roi2 = sum(sum((((CurrentImage - mean_image)/std_image).^4).*BreastMaskUndersample))/(Num-1);
     %StructuralAnalysis.
      display('first order');
       toc 
     
       tic
       bin = min_image:0.5:max_image;
      histogram=double(histc(reshape(CurrentImage,1,prod(size(CurrentImage))),bin));

      sum100 = sum(histogram);
      sum30 = sum100*0.3;
      sum50 = sum100/2;
      sum70 = sum100*0.7;
      
      grmean = mean_image;
%       sum_hist(1) = 0;      
%       for i = 1:length(histogram)
%          sum_hist(i) = sum(histogram(1:i));
%       end
      
      sum_hist = cumsum(histogram);
      gr30_index = find(sum_hist>sum30);
      gr30 = sum_hist(gr30_index(1)-1);
      %figure; bar(histogram(1:gr25_index(1)-1));
      
      gr50_index = find(sum_hist>sum50);
      gr50 = sum_hist(gr50_index(1)-1);
      %figure; bar(histogram(gr25_index(1):gr50_index(1)-1));
      
      gr70_index = find(sum_hist>sum70);
      gr70 = sum_hist(gr70_index(1)-1);
      %figure; bar(histogram(gr50_index(1):gr75_index(1)-1));
      balance = (gr70 - grmean)/(grmean - gr30);
      StructuralAnalysis.std_image = std_image;
      StructuralAnalysis.skewness = skew_roi;
      StructuralAnalysis.kurtosis = kurt_roi;
      StructuralAnalysis.balance = balance;
     
      display('balance');
      toc
       
      %%%%%%%%%%%%%%%%%%%%% END %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
   
   
    %%%%%%%%%%%%%%%%%%%%%%%%%  GRAY-LEVEL CO_OCCURRENCE MATRIX (GLCM)  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       %Create gray-level co-occurrence matrix from image
       tic
    Ng = 16;
    glcm_roi = graycomatrix(CurrentImage,'NumLevels',Ng,'GrayLimits',[min_image max_image]);
    stats = graycoprops(glcm_roi);
    N = sum(sum(glcm_roi));
    glcmroi_norm = glcm_roi/N;
    %glcm_norm = glcm_roi/N;
    glcm_0index = find(glcmroi_norm ~= 0);
    glcm_norm = glcmroi_norm(glcm_0index);
    glcmroi.entropy = -sum(glcm_norm.*log10(glcm_norm));
    energy = sum(sum(glcm_norm.^2)); %angular second moment
    gcontr = 0;
    sum_glcm = sum(sum(glcm_norm));
    glcmroi.energy = stats.Energy;
    glcmroi.contrast = stats.Contrast;
    glcmroi.homogeneity = stats.Homogeneity;
    glcmroi.correlation = stats.Correlation;
        
    StructuralAnalysis.glcm_energy = stats.Energy;
    StructuralAnalysis.glcm_contrast = stats.Contrast;
    StructuralAnalysis.glcm_homogeneity = stats.Homogeneity;
    StructuralAnalysis.glcm_correlation = stats.Correlation;
    
    %%%%%%%%%%% contrast calculation %%%%%%%%%%%%%%%%%%%%%%%%
    for i = 1:Ng
        for j = 1:Ng
            k_matr(i,j) = abs(i-j);
        end
    end
    
    for k = 0:Ng-1
        index = find(k_matr==k);
        gcontr = gcontr + k^2*sum(glcmroi_norm(index));
    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    i_vect = 1:Ng;
    i_matr = repmat(i_vect,1,Ng);
    j_vect = 1:Ng;
    j_matr = repmat(j_vect,Ng,1);
    mx = 0; my = 0;
    for i = 1:Ng
        mx = mx + i*sum(glcmroi_norm(i,:));
    end
   
    for j = 1:Ng
        my = my + j*sum(glcmroi_norm(:,j));
    end
    
    
    sx = 0; sy = 0;
    for i = 1:Ng
        sx = sx + (i-mx)^2*sum(glcmroi_norm(i,:));
    end
    
    for j = 1:Ng
        sy = sy + (j-my)^2*sum(glcmroi_norm(:,j));
    end
    
    glcmroi.mean = sqrt(mx^2+my^2);
    glcmroi.variance = sqrt(sx^2+sy^2);
    
    StructuralAnalysis.glcm_mean = glcmroi.mean;
    StructuralAnalysis.glcm_variance = glcmroi.variance;
   
    corr = 0;
    for i = 1:Ng
        for j = 1:Ng
            corr = corr + i*j*glcmroi_norm(i,j);
        end
    end
    correlation = (corr - mx*my)/(sx*sy);
    
    for i = 1:Ng
        px(i) = sum(glcmroi_norm(i,:));
    end
    
    for j = 1:Ng
        py(j) = sum(glcmroi_norm(:,j));
    end
    
    for i = 1:Ng
        for j = 1:Ng
            k_minus(i,j) = abs(i-j);
        end
    end
    
    for i = 1:Ng
        for j = 1:Ng
            k_plus(i,j) = i+j;
        end
    end
    
    p_xplusy = 0;
    for k = 2:2*Ng
        index = find(k_plus==k);
        p_xplusy = p_xplusy + sum(glcmroi_norm(index));
    end
    
    p_xminusy = 0;
    for k = 0:Ng
        index = find(k_minus==k);
        p_xminusy = p_xminusy + sum(glcmroi_norm(index));
    end

    
    a = 1;
   mi = 0; mj = 0;
     for i = 1:Ng
        for j = 1:Ng
            mi = mi + i*glcmroi_norm(i,j);
        end
     end
    
     for i = 1:Ng
        for j = 1:Ng
            mj = mj + j*glcmroi_norm(i,j);
        end
     end
    
     si2 = 0; sj2 = 0;
     
     for i = 1:Ng
        for j = 1:Ng
            si2 = si2 + glcmroi_norm(i,j)*(i-mi)^2;
        end
     end
     
      for i = 1:Ng
        for j = 1:Ng
            sj2 = sj2 + glcmroi_norm(i,j)*(j-mj)^2;
        end
      end
     
     g_c = 0;
     
     for i = 1:Ng
        for j = 1:Ng
            g_c  = g_c + glcmroi_norm(i,j)*(j-mj)*(i-mi)/sqrt(si2*sj2);
        end
     end
     
     dis = 0;
     
     for i = 1:Ng
        for j = 1:Ng
            dis  = dis + glcmroi_norm(i,j)*abs(i-j);
        end
     end
     
     inv_diffmom = 0;
     for i = 1:Ng
        for j = 1:Ng
            inv_diffmom  = inv_diffmom + glcmroi_norm(i,j)/(1+(i-j)^2); %homogeneity
        end
     end
    % glcm_log = (-log(glcmroi_norm));
     Flatglcm=reshape(glcmroi_norm,1,prod(size(glcmroi_norm)));        
        Sorted_glcm=sort(Flatglcm,2);
        [maxi,index]=max(Sorted_glcm>0);
        Sorted_glcm(1:index-1)=[];
        
     glcmroi.enthropy2 = nansum(nansum(glcmroi_norm.*(-log(glcmroi_norm))));
     glcmroi.enthropy = sum(Sorted_glcm.*(-log(Sorted_glcm)));
     glcmroi.dissimilarity = dis;
     glcmroi.homogeneity = inv_diffmom;
     
     StructuralAnalysis.glcm_dissimilarity = glcmroi.dissimilarity;
     StructuralAnalysis.glcm_homogeneity = glcmroi.homogeneity;
     StructuralAnalysis.glcm_enthropy = glcmroi.enthropy;
%      imin = min(min(image_roi));
%      imax = max(max(image_roi));
     im_size = size(CurrentImage);
    
     %%%%%%%%%%%%%%%%%%%%%%% END GLCM  %%%%%%%%%%%%%%%%%%%%%%% 
      display('glcm'); 
      toc
      
      %%%%%%%%%%%%%%%% MEAN GRADIENT %%%%%%%%%%%%%%%%%%%%%%%%%
      tic
      d = 3;
      im_xplusd = zeros(size(CurrentImage));
      im_xminusd = zeros(size(CurrentImage));
      im_yplusd = zeros(size(CurrentImage));
      im_yminusd = zeros(size(CurrentImage));
      
      im_xplusd(1:im_size(1)-d,:) = CurrentImage(d+1:im_size(1),:);
      im_xminusd(d+1:im_size(1),:) = CurrentImage(1:im_size(1)-d,:); 
      im_yplusd(:,1:im_size(2)-d) = CurrentImage(:,d+1:im_size(2));
      im_yminusd(:,d+1:im_size(2)) = CurrentImage(:,1:im_size(2)-d); 
      
%       dims = size(im);
%       new_si = mod(-offset,dims(1:2));
      gd_image = abs(CurrentImage-im_xplusd) + abs(CurrentImage-im_xminusd) + abs(CurrentImage-im_yplusd) + abs(CurrentImage-im_yminusd);
      gd_image = gd_image(d+1:im_size(1)-d,d+1:im_size(2)-d);
      gd_size = size(gd_image);
      mean_gd = sum(sum(gd_image))/(gd_size(1)*gd_size(2));
      StructuralAnalysis.mean_gradient = mean_gd;
     display('mean gradient'); 
     
     toc
      %%%%%%%%%%%%%%%%%%%%%%%%  END   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
       %%%%%%%%%%%%%%%%%%%%%%%%%% FRACTAL MINKOWSKI DIMENSION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     tic
     r = 1:10;
     for i = 1:10
         se3 = strel('rectangle', i*[3 3]);
         bw1 = imerode(CurrentImage, se3);
         bw2 = imdilate(CurrentImage,se3);
%          figure;imagesc(bw1);colormap(gray);
%          figure;imagesc(bw2);colormap(gray);
         V(i) = log10(sum(sum((bw2-bw1)))/i^3);
     end
         
    pm = polyfit(log10(1./r(2:end)),V(2:end),1);
%     figure;plot(log10(1./r),V,'bo');hold on;
%            plot(log10(1./r),pm(1)*log10(1./r)+pm(2),'r-');
    fr_mink=pm(1);
    StructuralAnalysis.FD_Minkowki = fr_mink;
    display('minkowski'); 
   
    toc
   a = 1;
   %%%%%%%%%%%%%%%%%%%%%%%%%  END  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    
   
   %%%%%%%%%%%%%%%%%%%% FOURIER ANALYSIS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
          tic
   %CurrentImage = CurrentImageUnderSample;
    
   UnderSamplingFactor = 2;
   CurrentImageFT=UnderSamplingN(CurrentImage,UnderSamplingFactor);
   BreastMaskUndersampleFT = ~(CurrentImageFT==0);
     min_CurrentImageFT = min(min(CurrentImageFT));
     if min_CurrentImageFT < 0 & abs(min_CurrentImageFT)< 10000
         CurrentImageFT = (CurrentImageFT - min_CurrentImageFT+1).*BreastMaskUndersampleFT;
     end
     FlatImage=reshape(CurrentImageFT,1,prod(size(CurrentImageFT)));  
     Sorted_vect=sort(FlatImage,2);
     [maxi,index]=max(Sorted_vect>0);
     Sorted_vect(1:index-1)=[];
     
     
     Num = length(Sorted_vect);
%      std_image = std(Sorted_vect);
%      mean_image = mean(Sorted_vect);
     min_imageFT = round(min(Sorted_vect));
     max_imageFT = round(max(Sorted_vect));
   im_sizeFT = size(CurrentImageFT);
  