function result = StructuralAnalysisComputation_400(image, mask, featParam)
%global ROI Outline Analysis Image xlsLineNum Info StructuralAnalysis Error
global StructuralAnalysis_400;
%iterate by gray level reduction
for iGray = 0:featParam.numGrRed
    
  
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%    Run-Length Features    %%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Message('Analyzing run-length features ...')
    for iDir = 1:length(featParam.RL.dir)
        %compute the run-length matrix
        dir = featParam.RL.dir(iDir);
        rlMatObj = calcRunLenMat(image, mask, dir);
        
        %compute features
        NOR = numOfRuns(rlMatObj);
        result(iGray+1).RL(iDir, 1) = NOR;
        result(iGray+1).RL(iDir, 2) = shortRunsEmph(rlMatObj, NOR);
        result(iGray+1).RL(iDir, 3) = longRunsEmph(rlMatObj, NOR);
        result(iGray+1).RL(iDir, 4) = grayLevNonuni(rlMatObj, NOR);
        result(iGray+1).RL(iDir, 5) = runLenNonuni(rlMatObj, NOR);
        result(iGray+1).RL(iDir, 6) = runPercent(rlMatObj, NOR);
        result(iGray+1).RL(iDir, 7) = lowGlevelRunEmph(rlMatObj, NOR);
        result(iGray+1).RL(iDir, 8) = highGlevelRunEmph(rlMatObj, NOR);
        
%         result(iGray+1).RL.NOR = numOfRuns(rlMatObj);
%         result(iGray+1).RL.SRE = shortRunsEmph(rlMatObj, result(iGray+1).RL.NOR);
%         result(iGray+1).RL.LRE = longRunsEmph(rlMatObj, result(iGray+1).RL.NOR);
%         result(iGray+1).RL.GLN = grayLevNonuni(rlMatObj, result(iGray+1).RL.NOR);
%         result(iGray+1).RL.RLN = runLenNonuni(rlMatObj, result(iGray+1).RL.NOR);
%         result(iGray+1).RL.RPT = runPercent(rlMatObj, result(iGray+1).RL.NOR);
%         result(iGray+1).RL.LGRE = lowGlevelRunEmph(rlMatObj, result(iGray+1).RL.NOR);
%         result(iGray+1).RL.HGRE = highGlevelRunEmph(rlMatObj, result(iGray+1).RL.NOR);
    end
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%    Laws Features    %%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Message('Analyzing Laws features ...')
    n = length(featParam.Laws.filter);
    for iVer = 1:n
        fVer = featParam.Laws.filter{iVer};
        for iHor = 1:n
            fHor = featParam.Laws.filter{iHor};
            
            %initialize struct result.Laws and create field names
%             result(iGray+1).Laws = struct;
            fName = [fVer, fHor];
            
            %compute features
            LawsFeat = laws(image, mask, fVer, fHor, [2, 4]);
            
            %pass values to variable 'result'
            result(iGray+1).Laws(iVer, iHor, 1) = LawsFeat(1);
            result(iGray+1).Laws(iVer, iHor, 2) = LawsFeat(2);
            
%             result(iGray+1).Laws = setfield(result(iGray+1).Laws, [fName, 'S'], LawsFeat(1));
%             result(iGray+1).Laws = setfield(result(iGray+1).Laws, [fName, 'F'], LawsFeat(2));
        end
    end
    
    
    
    %gray level reduction
    image = round(image/2);
    StructuralAnalysis_400=result;
end


